"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,y=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={id:"introduction",title:"Introduction",description:"Introduction to Gyeeta",slug:"/"},o="Introduction",s={unversionedId:"introduction",id:"introduction",title:"Introduction",description:"Introduction to Gyeeta",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/gyeeta.github.io/tree/main/docs/intro.md",tags:[],version:"current",lastUpdatedAt:1668793594,formattedLastUpdatedAt:"Nov 18, 2022",frontMatter:{id:"introduction",title:"Introduction",description:"Introduction to Gyeeta",slug:"/"},sidebar:"docs",next:{title:"Architecture",permalink:"/docs/architecture"}},l={},c=[{value:"Salient Features",id:"salient-features",level:2},{value:"Key Observability Capabilities",id:"key-observability-capabilities",level:2},{value:"Why Gyeeta?",id:"why-gyeeta",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Gyeeta"))," is a non intrusive, ",(0,a.kt)("em",{parentName:"p"},"100% ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/gyeeta/gyeeta"},"Open Source")," (GPLv3)")," and ",(0,a.kt)("em",{parentName:"p"},"Free")," Infrastructure, Services and Process Level monitor (",(0,a.kt)("em",{parentName:"p"},"Linux")," only).  "),(0,a.kt)("h2",{id:"salient-features"},"Salient Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Monitor Hosts, Services, Processes at ",(0,a.kt)("em",{parentName:"li"},"Global")," scale (scales to ",(0,a.kt)("em",{parentName:"li"},"tens of thousands")," of hosts)."),(0,a.kt)("li",{parentName:"ul"},"Completely Open Source including Agent and Server components. Free to use ",(0,a.kt)("em",{parentName:"li"},"forever"),"."),(0,a.kt)("li",{parentName:"ul"},"Completely non-intrusive monitoring using a combination of ",(0,a.kt)("a",{parentName:"li",href:"https://ebpf.io/"},"eBPF")," and Kernel Statistics."),(0,a.kt)("li",{parentName:"ul"},"All Data In-House (On Prem). No external data transfer. "),(0,a.kt)("li",{parentName:"ul"},"Monitor Kubernetes and other Cloud Native Cluster orchestrators.")),(0,a.kt)("h2",{id:"key-observability-capabilities"},"Key Observability Capabilities"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Service Level Statistics such as Queries/sec, Response Times (Latency) and HTTP Errors (if HTTP based) with no manual inputs or integrations.\nMonitors binary / proprietary network protocol or non HTTP Service statistics as well."),(0,a.kt)("li",{parentName:"ol"},"Query Global Aggregated Statistics from multiple servers using a single query either from Web UI or REST APIs."),(0,a.kt)("li",{parentName:"ol"},"Self Learning Algorithms that can detect Anomalies, Contention or Degradation without any manual inputs. "),(0,a.kt)("li",{parentName:"ol"},"Advanced Cluster, Service or Process Level Alerts using a powerful Web UI or REST APIs."),(0,a.kt)("li",{parentName:"ol"},"Detect Process Level ",(0,a.kt)("em",{parentName:"li"},"CPU starvation, Virtual Memory or IO Bottlenecks"),". "),(0,a.kt)("li",{parentName:"ol"},"Monitors all applications without any instrumentation or tapping irrespective of the programming language used."),(0,a.kt)("li",{parentName:"ol"},"Auto Detect Service Dependencies and Service Network Flows (Service Maps).")),(0,a.kt)("h2",{id:"why-gyeeta"},"Why Gyeeta?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Few Free and Open source tools are available which will non-intrusively monitor infrastructure and services with minimal overhead and\nwithout manual configuration. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Gyeeta is completely non-intrusive and uses a combination of eBPF and Kernel Statistics. No Application changes are needed. Gyeeta can monitor\nboth HTTP and non-HTTP based services and can provide statistics such as Queries/sec, Response Times, Network Throughputs, Service Network\nFlows for any service (even proprietary or TLS encrypted).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Gyeeta does not connect to any application. Gyeeta does not insert any probes, taps or instruments any\napplication nor does it use any tracing such as OpenTracing. This makes Gyeeta completely non-intrusive and does not require any\nconfiguration to monitor any service.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Commercial SaaS tools exist with varying degrees of Metrics and Observability capabilities but are expensive both in terms of cost\nand Host CPU, Memory and IO resources.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Gyeeta is meant to be a lightweight tool which can be deployed on thousands of hosts with minimal configuration. Gyeeta being a free,\noptimized (C++ based) and 100% Open source tool, users can deploy Gyeeta on all of their data centers or Cloud Environments without\nworrying about Observability expenses.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Gyeeta works on all Linux Kernels released since 2016 (Linux Kernels 4.4 or higher)."))))}p.isMDXComponent=!0}}]);