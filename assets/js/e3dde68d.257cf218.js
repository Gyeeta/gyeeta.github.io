"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[334],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),g=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=g(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=g(a),c=r,m=p["".concat(l,".").concat(c)]||p[c]||d[c]||i;return a?n.createElement(m,o(o({ref:t},u),{},{components:a})):n.createElement(m,o({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var g=2;g<i;g++)o[g]=a[g];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5614:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>g});var n=a(7462),r=(a(7294),a(3905));const i={id:"aggregation",title:"Query Aggregation",description:"Query Aggregation"},o="Query Aggregation",s={unversionedId:"querying/aggregation",id:"querying/aggregation",title:"Query Aggregation",description:"Query Aggregation",source:"@site/docs/querying/aggregation.md",sourceDirName:"querying",slug:"/querying/aggregation",permalink:"/docs/querying/aggregation",draft:!1,editUrl:"https://github.com/gyeeta/gyeeta.github.io/tree/main/docs/querying/aggregation.md",tags:[],version:"current",lastUpdatedAt:1657016899,formattedLastUpdatedAt:"Jul 5, 2022",frontMatter:{id:"aggregation",title:"Query Aggregation",description:"Query Aggregation"},sidebar:"docs",previous:{title:"Query Data Types & Filters",permalink:"/docs/querying/datatypes"},next:{title:"Grouped Processes",permalink:"/docs/querying/groupprocess"}},l={},g=[{value:"Aggregation Operators",id:"aggregation-operators",level:2},{value:"String Field Aggregation Operators",id:"string-field-aggregation-operators",level:3},{value:"Numeric Field Aggregation Operators",id:"numeric-field-aggregation-operators",level:3},{value:"Boolean Field Aggregation Operators",id:"boolean-field-aggregation-operators",level:3},{value:"Aggregation Interval",id:"aggregation-interval",level:2},{value:"Pre-Aggregation / Post-Aggregation Filters",id:"pre-aggregation--post-aggregation-filters",level:2},{value:"Predefined Subsystem Aggregations",id:"predefined-subsystem-aggregations",level:2},{value:"Custom Aggregation Queries",id:"custom-aggregation",level:2},{value:"Custom Aggregation Consolidation across madhava instances",id:"custom-aggregation-consolidation-across-madhava-instances",level:3}],u={toc:g};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"query-aggregation"},"Query Aggregation"),(0,r.kt)("p",null,"Aggregation refers to operations on a set of individual records to form a reduced (aggregated) resultset. In Gyeeta,\nAggregation operates on a time duration of 1 min or more. Aggregation intervals define the step size used for aggregation operations on the resultset."),(0,r.kt)("p",null,"Aggregation always starts with the resultset of a single host. For a multi host query (query spanning multiple hosts), aggregation will be done\nper host as a first step followed by a later second pass aggregation. "),(0,r.kt)("p",null,"Within a single host, the aggregation will first retrieve the detailed resultset matching any filters (pre-aggregated filters) set. Thereafter,\nthe aggregation will apply the Aggregation Operators on each field. "),(0,r.kt)("p",null,"The Search Web UI Video shown below shows examples of Query Aggregation (both Predefined and Custom)."),(0,r.kt)("iframe",{width:"500px",height:"300px",src:"https://www.youtube.com/embed/_6nGLY2YcIo?rel=0",title:"Gyeeta YouTube video player",frameBorder:"0",hd:"1",allow:"fullscreen; accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,r.kt)("h2",{id:"aggregation-operators"},"Aggregation Operators"),(0,r.kt)("p",null,"Aggregation Operators supported in Gyeeta are :"),(0,r.kt)("h3",{id:"string-field-aggregation-operators"},"String Field Aggregation Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Group By (implicitly used for all string fields unless other operators specified)"),(0,r.kt)("li",{parentName:"ul"},"First Element (",(0,r.kt)("inlineCode",{parentName:"li"},"first_elem"),")"),(0,r.kt)("li",{parentName:"ul"},"Last Element (",(0,r.kt)("inlineCode",{parentName:"li"},"last_elem"),")")),(0,r.kt)("h3",{id:"numeric-field-aggregation-operators"},"Numeric Field Aggregation Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Average (mean) (",(0,r.kt)("inlineCode",{parentName:"li"},"avg"),")"),(0,r.kt)("li",{parentName:"ul"},"Sum of the fields (",(0,r.kt)("inlineCode",{parentName:"li"},"sum"),")"),(0,r.kt)("li",{parentName:"ul"},"Maximum (",(0,r.kt)("inlineCode",{parentName:"li"},"max"),")"),(0,r.kt)("li",{parentName:"ul"},"Minimum (",(0,r.kt)("inlineCode",{parentName:"li"},"min"),")"),(0,r.kt)("li",{parentName:"ul"},"Percentile (for e.g. p99) (",(0,r.kt)("inlineCode",{parentName:"li"},"percentile"),")"),(0,r.kt)("li",{parentName:"ul"},"First Element (",(0,r.kt)("inlineCode",{parentName:"li"},"first_elem"),")"),(0,r.kt)("li",{parentName:"ul"},"Last Element (",(0,r.kt)("inlineCode",{parentName:"li"},"last_elem"),")")),(0,r.kt)("h3",{id:"boolean-field-aggregation-operators"},"Boolean Field Aggregation Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Boolean OR (",(0,r.kt)("inlineCode",{parentName:"li"},"bool_or"),")"),(0,r.kt)("li",{parentName:"ul"},"Boolean AND (",(0,r.kt)("inlineCode",{parentName:"li"},"bool_and"),")"),(0,r.kt)("li",{parentName:"ul"},"Count of condition (",(0,r.kt)("inlineCode",{parentName:"li"},"count"),")")),(0,r.kt)("p",null,"After applying the desired Aggregation Operator on each field, the resultset will get reduced. For Single Host queries, the query is deemed complete\nat this point."),(0,r.kt)("p",null,"For multi host queries, a second pass aggregation will next take place, which will aggregate across the first pass single host aggregated resultset."),(0,r.kt)("h2",{id:"aggregation-interval"},"Aggregation Interval"),(0,r.kt)("p",null,"Aggregation Intervals define the step size for Aggregations within a single Host. For example, if a query is for aggregating Service States for last\n3 hours with an aggregation interval of 5 minutes, it implies multiple aggregations one after the other will be done on each 5 minute dataset."),(0,r.kt)("p",null,"If users want a single aggregated resultset the Aggregation Interval must be set to at least the entire query time duration. For example, in the\nabove case, the Aggregation Interval must be at least 3 hours."),(0,r.kt)("h2",{id:"pre-aggregation--post-aggregation-filters"},"Pre-Aggregation / Post-Aggregation Filters"),(0,r.kt)("p",null,"Pre-Aggregation Filters are the first level filters that can be used to reduce the dataset needed for the aggregation. In other words,\nPre-Aggregation Filters are applied to the dataset ",(0,r.kt)("em",{parentName:"p"},"before")," any aggregation is done."),(0,r.kt)("p",null,"For example, lets say you need to query Process State aggregation for a specific cluster. In this case the cluster name should be\nspecified in the pre-aggregation filters. If the cluster name filter were instead specified in the post-aggregation filter, it would have\nresulted in an inefficient query, as the dataset for all clusters would have been scanned in the first pass."),(0,r.kt)("p",null,"Post-Aggregation filters are applied ",(0,r.kt)("em",{parentName:"p"},"after")," the aggregation has been executed to further reduce the resultset. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Post Aggregation filters are ",(0,r.kt)("strong",{parentName:"p"},"mandatory")," for DB Aggregation Alerts.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Gyeeta REST API querying by default, will assume non-aggregated (or detailed) resultsets. To specify aggregation in REST APIs, users need to\nspecify ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregate"),' as true within the "options" JSON object of the request. '),(0,r.kt)("p",{parentName:"admonition"},'An example cURL command showing the extsvcstate REST API call with both pre-aggregation and post-aggregation filters set\n(pre-aggregation filter within "filter" and post-aggregation within "aggrfilter" fields) :'),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl \'http://dev204.local:10039/v1/extsvcState\' \\\n  -H \'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlIjpbImFkbWluIl0sImlhdCI6MTY1NjI2MTgwNywiZXhwIjoxNjU2MzQ4MjA3fQ.tma_H727ek7RGDmKHPvL3lEI5CBVgETNYDwMREnsC4E\' \\\n  -H \'Content-Type: application/json\' \\\n  -d $\'{"starttime":"2022-06-26T19:02:05+05:30","endtime":"2022-06-26T20:02:05+05:30","timeoutsec":500, "options":{"maxrecs":10000,"aggregate":true,"aggrsec":300,"aggroper":"avg","filter":" { cluster substr \\\'k8s\\\' } ","aggrfilter":" { nconns > 10 } "}}\'\n\n'))),(0,r.kt)("h2",{id:"predefined-subsystem-aggregations"},"Predefined Subsystem Aggregations"),(0,r.kt)("p",null,"Gyeeta provides Predefined Aggregation Queries for all subsystems which support aggregation for quick querying without knowing all the fields available."),(0,r.kt)("p",null,"The Predefined Aggregation Queries result in an aggregation which contains most of the fields available in the Detailed (non-aggregated) resultsets. "),(0,r.kt)("p",null,"These aggregations do not give the users many options to change the field aggregations. The only options supported are :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Choice of Default Numerical Aggregation Operation (default is ",(0,r.kt)("inlineCode",{parentName:"li"},"avg"),")"),(0,r.kt)("li",{parentName:"ul"},"Aggregation Interval ")),(0,r.kt)("p",null,"Another side-effect of using the Predefined Subsystem Aggregations is that the fields in most subsystem predefined aggregates will also include Host unique\nfields such as ",(0,r.kt)("inlineCode",{parentName:"p"},"parid")," (Partha ID) and ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," (Hostname). The resultant aggregations will therefore not be aggregated across hosts but only within a host."),(0,r.kt)("p",null,"Also, Predefined Aggregations for subsystems such as Service State, Process State will include not just Host unique fields mentioned above, but also\nglobally unique fields such as ",(0,r.kt)("inlineCode",{parentName:"p"},"svcid")," (Service ID) and ",(0,r.kt)("inlineCode",{parentName:"p"},"procid")," (Grouped Process ID (not PID)). This will result in aggregations which are both\nHost unique and Service or Process unique within the host as well. "),(0,r.kt)("p",null,"For example, lets say a Host has 2 separate instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"redis")," running resulting in 2 different ",(0,r.kt)("inlineCode",{parentName:"p"},"svcid"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"extsvcstate")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"svcstate")," subsystem\nPredefined aggregations will then not combine statistics of these 2 instances for aggregations but will consider them as different instances which is\nwhat is needed in most cases. But if users want to combine statistics of all ",(0,r.kt)("inlineCode",{parentName:"p"},"redis")," instances across all hosts and aggregate them, they will need\nto use the Custom Aggregation Query."),(0,r.kt)("p",null,"Using the Predefined Aggregations gives users a quick way to get aggregated statistics. But if the users need more fine-tuned stats, they will need to define\na Custom Aggregation Query as explained below."),(0,r.kt)("h2",{id:"custom-aggregation"},"Custom Aggregation Queries"),(0,r.kt)("p",null,"Custom Aggregation Queries gives the user the option to select specific fields from within the detailed (non aggregated) resultset to use for aggregations\nand allows users custom aggregation operations which are not provided in the Predefined Aggregations."),(0,r.kt)("p",null,"To aggregate statistics across hosts as a consolidated single row, Custom Aggregation is needed wherein the columns selected should not be Host specific."),(0,r.kt)("p",null,"For example, the following is a Custom Aggregation REST API example for svcstate subsystem with custom aggregation operations specified within the ",(0,r.kt)("em",{parentName:"p"},"columns")," field :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'\ncurl http://localhost:10039/v1/svcstate \\\n    -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlIjpbImFkbWluIl0sImlhdCI6MTY1NjI2NjkwNCwiZXhwIjoxNjU2MzUzMzA0fQ.YQvdxawLsq_j6TcG5aeTVQffV84v8GRM3GJkoWamjHs" \\\n    -H "Content-Type: application/json" \\\n    -d $\'{"timeoffsetsec" : 3600, "timeout" : 300,  "options" : { "aggregate" : true, "aggroper" : "max", "columns" : [ "name",  "ishttp", "max(iodelus)/1000 as maxiodelms", "avg(resp5s)/max(resp5s) * 100 as respratio", "sum(sererr + clierr)/sum(nqry5s)  * 100 as weberrpct", "avg(kbin15s + kbout15s)/1024 as avgnwmb", "last_elem(resp5s) as lastresp", "percentile(99, resp5s) as pctresp5s", "count(sererr + clierr > 0) as weberrs" ], "aggrfilter" : "( { maxiodelms > 0 } and { avgnwmb >= 1000 } )" , "filter" : "( { name in \\\'postgres\\\', \\\'node\\\', \\\'server\\\' } )" } }\' \n\n')),(0,r.kt)("p",null,"The columns (fields) specified for the Custom Aggregation can also refer to the Predefined Aggregation fields (as seen from above where ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ishttp"),"\nare from Predefined fields)."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The above Custom Query can also be executed from the Web UI Search Page which provides a simpler interface to quickly create Custom Aggregation columns.")),(0,r.kt)("h3",{id:"custom-aggregation-consolidation-across-madhava-instances"},"Custom Aggregation Consolidation across madhava instances"),(0,r.kt)("p",null,"Currently, consolidated Custom Aggregation will aggregate records seen within hosts of a single ",(0,r.kt)("inlineCode",{parentName:"p"},"madhava")," Intermediate Server and not across all\n",(0,r.kt)("inlineCode",{parentName:"p"},"madhava")," instances. In other words, each ",(0,r.kt)("inlineCode",{parentName:"p"},"madhava")," instance will have its unique consolidated row instead of a single consolidated row\nglobally and there will be multiple rows within the final resultset, one for each ",(0,r.kt)("inlineCode",{parentName:"p"},"madhava"),"."),(0,r.kt)("p",null,"A single ",(0,r.kt)("inlineCode",{parentName:"p"},"madhava")," can handle hundreds of hosts. So the Custom Aggregation will still span hundreds of hosts within a single row."),(0,r.kt)("p",null,"This limitation will be removed in a future release."))}d.isMDXComponent=!0}}]);