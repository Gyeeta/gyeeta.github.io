"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4910],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>c});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),o=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=o(r),c=n,g=u["".concat(p,".").concat(c)]||u[c]||m[c]||i;return r?a.createElement(g,l(l({ref:t},d),{},{components:r})):a.createElement(g,l({ref:t},d))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var o=2;o<i;o++)l[o]=r[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5978:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=r(7462),n=(r(7294),r(3905));const i={id:"datatypes",title:"Query Data Types & Filters",description:"Query Data Types & Filters"},l="Gyeeta Query Data Types and Filters",s={unversionedId:"querying/datatypes",id:"querying/datatypes",title:"Query Data Types & Filters",description:"Query Data Types & Filters",source:"@site/docs/querying/datatypes.md",sourceDirName:"querying",slug:"/querying/datatypes",permalink:"/docs/querying/datatypes",draft:!1,editUrl:"https://github.com/gyeeta/gyeeta.github.io/tree/main/docs/querying/datatypes.md",tags:[],version:"current",lastUpdatedAt:1668108684,formattedLastUpdatedAt:"Nov 10, 2022",frontMatter:{id:"datatypes",title:"Query Data Types & Filters",description:"Query Data Types & Filters"},sidebar:"docs",previous:{title:"Networking & Subsystems",permalink:"/docs/querying/queryoverview"},next:{title:"Query Aggregation",permalink:"/docs/querying/aggregation"}},p={},o=[{value:"Data Types supported",id:"data-types-supported",level:2},{value:"String Data Type",id:"string-data-type",level:3},{value:"Numeric Data Types",id:"numeric-data-types",level:3},{value:"Boolean Data Type",id:"boolean-data-type",level:3},{value:"Query Filter Types",id:"query-filter-types",level:2},{value:"Query Filter Format",id:"query-filter-format",level:2},{value:"Query Criteria",id:"query-criteria",level:3},{value:"Filter Comparison Operators",id:"filter-comparison-operators",level:3},{value:"Filter Field Expressions",id:"filter-field-expressions",level:3}],d={toc:o};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"gyeeta-query-data-types-and-filters"},"Gyeeta Query Data Types and Filters"),(0,n.kt)("h2",{id:"data-types-supported"},"Data Types supported"),(0,n.kt)("p",null,"Gyeeta queries and responses are in JSON format. The following JSON field types are supported :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"String")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Numeric")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Boolean")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Object")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Array"))),(0,n.kt)("h3",{id:"string-data-type"},"String Data Type"),(0,n.kt)("p",null,'String Data Types include all UTF8 strings and single characters. Examples : "This is a string".\nFields which are JSON Arrays and Objects are internally stored as Strings as well.'),(0,n.kt)("h3",{id:"numeric-data-types"},"Numeric Data Types"),(0,n.kt)("p",null,"Numeric Data Types include both integral and floating point numbers. Examples include : 10, 3.1, 3.14159"),(0,n.kt)("h3",{id:"boolean-data-type"},"Boolean Data Type"),(0,n.kt)("p",null,"Boolean Data Types can have only 2 possible values : true or false. Boolean values must not be enclosed within quotes."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Time fields are a special type in Gyeeta. Time fields are specified as ",(0,n.kt)("em",{parentName:"p"},"Strings")," but support some ",(0,n.kt)("em",{parentName:"p"},"Numeric")," Operations\nsuch as >, <, =, !=, +, -")),(0,n.kt)("h2",{id:"query-filter-types"},"Query Filter Types"),(0,n.kt)("p",null,"Gyeeta Query Filters are of 2 types :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Pre-Aggregated Filters"),(0,n.kt)("li",{parentName:"ul"},"Post-Aggregated Filters")),(0,n.kt)("p",null,"All filters (except query time range) that are to be applied to the raw resultset without any aggregation are specified\nwithin the Pre-Aggregated Filters."),(0,n.kt)("p",null,"All filters that are to be applied after aggregation are specified within the Post-Aggregated Filters. Post-Aggregated\nfilters must not be specified if Aggregation is disabled within a query."),(0,n.kt)("p",null,"Both these filters are to be specified as JSON Strings. A sample REST API query in JSON format showing both the filters specified is show below :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "starttime": "2022-07-01T19:37:04+05:30",\n  "endtime": "2022-07-01T20:07:04+05:30",\n  "timeoutsec": 500,\n  "options": {\n    "maxrecs": 10000,\n    "aggregate": true,\n    "aggrsec": 18000,\n    "aggroper": "sum",\n    "filter": "{ cluster ~ \'prod.*\' }",\n    "aggrfilter": "( { svcissue > 0 }  or  { sererr > 0 } )"\n  }\n}\n')),(0,n.kt)("p",null,'"filter" field refers to the Pre-Aggregation filter and "aggrfilter" field refers to Post-Aggregation filter.'),(0,n.kt)("p",null,"The query time range (",(0,n.kt)("em",{parentName:"p"},"starttime")," & ",(0,n.kt)("em",{parentName:"p"},"endtime"),") is specified outside of the Pre-Aggregation filters for faster dataset filtering."),(0,n.kt)("h2",{id:"query-filter-format"},"Query Filter Format"),(0,n.kt)("p",null,"The Query filters mentioned above have a certain structure that is required by Gyeeta."),(0,n.kt)("h3",{id:"query-criteria"},"Query Criteria"),(0,n.kt)("p",null,"Each filter clause is termed as a Criterion. For example, above specified ",(0,n.kt)("em",{parentName:"p"},"aggrfilter"),' has 2 criteria : "svcissue > 0" and "sererr > 0".'),(0,n.kt)("p",null,"Each criterion needs to be enclosed in braces as in { svcissue > 0 }. Multiple criteria can be specified along with a mix of ",(0,n.kt)("em",{parentName:"p"},"and")," or ",(0,n.kt)("em",{parentName:"p"},"or"),"\nconditions."),(0,n.kt)("p",null,"When a mix of ",(0,n.kt)("em",{parentName:"p"},"and")," and ",(0,n.kt)("em",{parentName:"p"},"or")," conditions is to be specified, the criteria need to be enclosed by parenthesis. For example :"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"( { name ~ '^[mnp]+' } and ( { nqry5s > 0 } or { cpudelus > 0 } ) )")),(0,n.kt)("p",null,"The filter above will be expanded by Gyeeta internally as :"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"( { name ~ '^[mnp]+' } and { nqry5s > 0 } ) or ( { name ~ '^[mnp]+' } and { cpudelus > 0 } )")),(0,n.kt)("p",null,"Even more advanced filters are possible with multiple ",(0,n.kt)("em",{parentName:"p"},"and")," and ",(0,n.kt)("em",{parentName:"p"},"or")," criteria. For example,"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"( ( { host substr 'prod' } or { cluster ~ 'cl[5-9].*' } ) and { svcid = '8e4343f0702963a4' } and ( { p95resp5s < resp5s } or { kbin15s + kbout15s > 1 } ) )")),(0,n.kt)("h3",{id:"filter-comparison-operators"},"Filter Comparison Operators"),(0,n.kt)("p",null,"The following Comparison Operators are supported :"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"=, !="),(0,n.kt)("td",{parentName:"tr",align:"center"},"Equal, Not Equal"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Valid for all Field Data types. For String fields Case Sensitive. e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ numfield = 3 } or { strfield = 'test string' }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"<, >, <=, >="),(0,n.kt)("td",{parentName:"tr",align:"center"},"Less Than, Greater Than"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Valid for Numeric Data Types (as well as Time fields). e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ numfield > 3 }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"~, like, ~=, =~"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Regex Like Operator"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Case Insensitive Regular Expression ",(0,n.kt)("em",{parentName:"td"},"like")," Operator valid for String fields. e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ strfield ~ 'myreg.[123]' }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"!~, notlike"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Regex Not Like Operator"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Case Insensitive Regular Expression ",(0,n.kt)("em",{parentName:"td"},"not like")," Operator valid for String fields. e.g.  ",(0,n.kt)("inlineCode",{parentName:"td"},"{ strfield !~ 'myreg.[123]' }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"substr"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Substring Operator"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Case sensitive Substring Operator valid for String fields. e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ strfield substr 'mysubstring' }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"notsubstr"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Not Substring Operator"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Case sensitive Not Substring Operator valid for String fields. e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ strfield notsubstr 'mysubstring' }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"in"),(0,n.kt)("td",{parentName:"tr",align:"center"},"List In Operator"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Comma separated List Equality Operator for Strings and Numeric Types. Case sensitive for String fields. e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ strfield in 'str 1','str 2','str 3' }"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"notin"),(0,n.kt)("td",{parentName:"tr",align:"center"},"List Not In Operator"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Comma separated List Inequality Operator for Strings and Numeric Types. Case sensitive for String fields. e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"{ strfield notin 'str 1','str 2','str 3' }"))))),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"As seen from above, within a Filter expression, all strings must be within single quotes as in : { strfield = 'test str' }")),(0,n.kt)("h3",{id:"filter-field-expressions"},"Filter Field Expressions"),(0,n.kt)("p",null,"The filter field can have mathematical operators added for Numberic Field types. For example,"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"{ numfield1 + numfield2 > 10 }"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"{ numfield1 * 10 > 300 }")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"{ numfield1 % 3 > 1 }")),(0,n.kt)("p",null,"The filter field can also be compared to another field within the same subsystem. This is valid for all Field Types. "),(0,n.kt)("p",null,"For example,"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\n{ strfield != strfield2 } \n\n{ numfield1 + numfield2 > numfield3 }`\n\n{ numfield1 > numfield2 * 10 }\n\n")))}m.isMDXComponent=!0}}]);